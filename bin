#!/usr/bin/env node

'use strict';

const fs = require('fs');


const inputFile = process.argv[2] // Returns array of command line arguments
fs.readFile(inputFile || '', 'utf8', (err, data) => { //Read in supplied file
    if (err) {
        console.log('Incorrect file path')
    } else {
        parseCommandFile(data);

    }

});


const commands = {
    I: createBitmap,
    C: createBitmap,
    S: drawBitmap,
    L: paintPixel,
    H: horizontal,
    V: vertical
};

function parseCommandFile(rawData) {
    let bitmap;
    const inputCommands = rawData.split('\n').map(line => line.split(' '));
    for (const cmdLine of inputCommands) {
        const [cmd, ...args] = cmdLine;
        try {
            bitmap = commands[cmd](bitmap, ...args);
        } catch (e) {
            console.error(`command ${cmd} did not receive the required parameters!`)
        }
    }
}

function createBitmap(bitmap, N, M) {
    // Do not allow N X M to be grater than 250 x 250
    N = Math.min(+N, 250)
    M = Math.min(+M, 250)
    bitmap = Array.from({
            length: M
        },
        () =>
        Array.from({
                length: N
            },
            () => 'O'
        )
    );
    return bitmap;
}

function paintPixel(bitmap, X, Y, C) {
    // correct for offset 1 instead of 0
    const x = X - 1;
    const y = Y - 1;
    if (x >= bitmap[0].length || y >= bitmap.length) {
        console.error(`trying to draw outside the bitmap, coordinates ${x}/${y} don't exists`);
        return bitmap;
    }
    if (typeof C !== 'string' || C.length > 1) {
        console.error(`trying to draw without a correct color. color ${C} is not allowed`);
        return bitmap;
    }
    bitmap[y][x] = C;
    return bitmap;
}